---
- hosts: all
  remote_user: ec2-user
  become_method: sudo

  vars:
    REPO: https://github.com/fedspendingtransparency/data-act-broker-backend.git
    BRANCH: "{{ BRANCH }}"

    CONFIG_HOME: /data-act/config
    DATADOG_YML_PATH: "/data-act/config/datadog/datadog.yaml"
    ansible_python_interpreter: /usr/bin/python3.5

    envs:
      master:      {env_long: prod }
      staging:     {env_long: staging }
      qat:         {env_long: qat }
      development: {env_long: dev }
      sandbox:     {env_long: sandbox}

  tasks:

# ===================== Copy Git Creds from S3 Bucket =====================#

    - name: Create a link to new Python executables
      become: true
      file:
        force: yes
        src: "{{ item.src }}"
        path: "{{ item.path }}"
        state: link
      with_items:
        - { src: "/usr/bin/python3.5", path: "/usr/bin/python" }
        - { src: "/usr/bin/python3.5", path: "/usr/bin/python3" }
        - { src: "/usr/bin/pip3.5", path: "/usr/bin/pip" }
        
    - name: python version
      shell: "python --version"
      register: python_installed
      ignore_errors: yes

    - debug: msg="{{ python_installed.stdout }}"
      ignore_errors: yes
    
    - name: pip version
      shell: "pip --version"
      register: pip_installed
      ignore_errors: yes

    - debug: msg="{{ pip_installed.stdout }}"
      ignore_errors: yes
          
    - name: boto3
      become: true
      pip:
        name:
          - selinux
          - botocore
          - boto3
        executable: pip3.5

    - name: copy github credentials from S3 Bucket
      aws_s3:
        mode: getstr
        bucket: da-config
        object: /shared/github-data-act-service-account.pat
        region: us-gov-west-1
      register: pat

# ========================= Git Checkout ========================#

    - name: Checkout backend from git
      become: true
      git:
        repo: "{{ REPO }}"
        version: "{{ BRANCH }}"
        dest: "/data-act/backend"
        force: "yes"

    - name: Checkout broker config from git
      become: true
      git:

        repo: https://pat:{{ pat.contents }}@github.com/fedspendingtransparency/data-act-broker-config.git
        dest: /data-act/config
        force: "yes"

    - name: Checkout build-tools repo from git
      become: true
      git:

        repo: https://pat:{{ pat.contents }}@github.com/fedspendingtransparency/data-act-build-tools.git
        dest: /data-act/build-tools
        force: "yes"

    - name: Assign ownership of api to ec2-user
      become: true
      file:
        path: /data-act/
        owner: ec2-user
        recurse: "yes"

    - name: Assign ownership of tmp to ec2-user
      become: true
      file:
        path: /tmp
        owner: ec2-user
        recurse: "yes"

#===============================  Set http and https proxies  ===============================#

    - name: copy ansible-vars-{{ vars['envs'][BRANCH]['env_long'] }}.yml to 
      fetch:
        src: "{{ CONFIG_HOME }}/deployment/ansible-vars-{{ vars['envs'][BRANCH]['env_long'] }}.yml"
        dest: /home/ec2-user/
        flat: true

    - name: Load variables from config repo
      include_vars: "/home/ec2-user/ansible-vars-{{ vars['envs'][BRANCH]['env_long'] }}.yml"

    - name: create /etc/profile.d/proxy.sh to export proxy env vars
      become: true
      copy:
        dest: /etc/profile.d/proxy.sh
        mode: 0755
        content: |
          http_proxy={{ SQUID_ELB }}
          https_proxy={{ SQUID_ELB }}
          no_proxy={{ NO_PROXY_VAR }}
          export http_proxy https_proxy no_proxy
    
    - name: add proxy env vars to /etc/environment
      become: true
      blockinfile:
        dest: /etc/environment
        block: |
          http_proxy={{ SQUID_ELB }}
          https_proxy={{ SQUID_ELB }}
          HTTP_PROXY={{ SQUID_ELB }}
          HTTPS_PROXY={{ SQUID_ELB }}
          no_proxy={{ NO_PROXY_VAR }}
          NO_PROXY={{ NO_PROXY_VAR }}
    
    - name: Execute proxy.sh
      shell: /etc/profile.d/proxy.sh

    - name: add proxy env to /etc/systemd/system.config
      become: true
      ini_file:
        path: /etc/systemd/system.conf
        section: Manager
        option: DefaultEnvironment
        value: >
          http_proxy={{ SQUID_ELB }}
          https_proxy={{ SQUID_ELB }}
          HTTP_PROXY={{ SQUID_ELB }}
          HTTPS_PROXY={{ SQUID_ELB }}
          no_proxy={{ NO_PROXY_VAR }}
          NO_PROXY={{ NO_PROXY_VAR }}

# ======================== Install PIP Packages ========================#

    - name: Install backend packages based on requirements.txt
      become: true
      pip:
        chdir: /data-act/backend
        requirements: requirements.txt
        executable: pip3.5

    - name: Install server packages based on server_requirements.txt
      become: true
      pip:
        chdir: /data-act/backend
        requirements: server_requirements.txt
        executable: pip3.5

# ======================== Configure DataDog Key ========================#

    - name: copy datadog_key from S3
      shell: "aws s3 cp s3://da-config/shared/datadog_key /data-act/config/ --region us-gov-west-1"

    - name: save the contents of datadog_key file
      shell: cat /data-act/config/datadog_key
      register: dd_key

    - name: add Datadog license key to datadog.yaml
      lineinfile:
        dest: "{{ DATADOG_YML_PATH }}"
        regexp: '\s*api_key: .*'
        line: "api_key: {{ dd_key.stdout }}"

    - name: copy datadog.yml to its home location
      become: true
      copy:
        src: "{{ DATADOG_YML_PATH }}"
        dest: /etc/datadog-agent/datadog.yaml
        remote_src: true

#=============================== Configure ClamAv  ===============================#

    - name: Create /var/log/clamav
      become: true
      file:
        path: /var/log/clamav
        state: directory

    - name: chmod 0755 clamscan_daily
      become: true
      file:
        path: /data-act/config/clamav/clamscan_daily.sh
        owner: ec2-user
        mode: "0755"

    - name : create Crontab to run daily scans
      become: true
      cron:
        name: add clamscan_daily.sh and freshclam to crontab
        minute: "0"
        hour: "1"
        job: '/usr/bin/freshclam --quiet && /data-act/config/clamav/clamscan_daily.sh'


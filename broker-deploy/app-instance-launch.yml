# ========================= BROKER-API-LAUNCH PLAYBOOK ========================#

# =============================  Notes  =============================#
#  - 'envs' used for filebeat to translate                           #
#  - You MUST provide a DOMAIN_NAME for ALLOWED_HOSTS and SSL        #
# ===================================================================#

---
- hosts: "localhost"
  user: ec2-user
  become_method: sudo

  vars:

    APP: "{{ APP }}"
    BRANCH: "{{ BRANCH }}"
    ansible_python_interpreter: /usr/bin/python

    apps:
      broker: {app_long: broker, app_short: API}
      validator: {app_long: validator, app_short: Val}

    # Domains are used for SSL cert identification
    envs:
      master:  {env_long: prod,    domain: 'broker-api.usaspending.gov' }
      staging: {env_long: staging, domain: 'broker-staging-api.usaspending.gov' }
      dev:     {env_long: dev,     domain: 'broker-dev-api.usaspending.gov' }
      sandbox: {env_long: sandbox, domain: 'broker-sandbox-api.usaspending.gov'}

  tasks:

    # ===================== Configs =====================#
    - name: Copy core config
      copy:
        src: "/data-act/config/backend/config.yml"
        dest: "/data-act/backend/dataactcore/config.yml"
        remote_src: true

    - name: Copy environmental config
      copy:
        src: "/data-act/config/backend/{{ vars['envs'][BRANCH]['env_long'] }}_config.yml"
        dest: "/data-act/backend/dataactcore/{{ vars['envs'][BRANCH]['env_long'] }}_config.yml"
        remote_src: true

    # ===================== Filebeat Configuration =====================#

    - name: Copy filebeat config
      become: true
      copy:
        src: "/data-act/config/filebeat/filebeat-broker.yml"
        dest: "/etc/filebeat/filebeat.yml"
        remote_src: true

    - name: Update filebeat config to set correct index (broker)
      when: APP == "broker"
      become: true
      replace:
        dest: "/etc/filebeat/filebeat.yml"
        regexp: 'index: placeholder'
        replace: "index: broker-api-{{ vars['envs'][BRANCH]['env_long'] }}"

    - name: Update filebeat config to set correct index (val)
      when: APP == "validator"
      become: true
      replace:
        dest: "/etc/filebeat/filebeat.yml"
        regexp: 'index: placeholder'
        replace: "index: broker-val-{{ vars['envs'][BRANCH]['env_long'] }}"

    # ===================== Nginx Config =====================#

    - name: Copy broker nginx config
      when: APP == "broker"
      become: true
      copy:
        src: "/data-act/config/nginx/nginx_broker_api.conf"
        dest: "/etc/nginx/nginx.conf"
        remote_src: true

    - name: Update nginx config to set correct server_name
      when: APP == "broker"
      become: true
      replace:
        dest: "/etc/nginx/nginx.conf"
        regexp: 'server_name INSERT_WITH_ANSIBLE;'
        replace: "server_name {{ vars['envs'][BRANCH]['domain'] }};"

    - name: download secrets from S3 bucket
      become: true
      shell: "aws s3 cp s3://da-config/broker/{{ vars['envs'][BRANCH]['env_long'] }}_secrets.yml /data-act/backend/dataactcore/{{ vars['envs'][BRANCH]['env_long'] }}_secrets.yml --region us-gov-west-1"

    # ===================== SSL Certs (not used for Validator) =====================#

    - name: Copy public.pem from S3 Bucket
      when: APP == "broker"
      become: true
      shell: "aws s3 cp s3://usaspending-ssl/{{ vars['envs'][BRANCH]['domain'] }}/public.pem /etc/cert.pem --region us-gov-west-1"

    - name: Copy private.pem from S3 Bucket
      when: APP == "broker"
      become: true
      shell: "aws s3 cp s3://usaspending-ssl/{{ vars['envs'][BRANCH]['domain'] }}/private.pem /etc/cert.key --region us-gov-west-1"

    - name: Assign ownership of cert.pem to ec2-user
      when: APP == "broker"
      become: true
      file:
        path: /etc/cert.pem
        owner: ec2-user

    - name: Assign ownership of cert.key to ec2-user
      when: APP == "broker"
      become: true
      file:
        path: /etc/cert.key
        owner: ec2-user

    # ===================== DataDog Configuration =====================#

    - name: Define Datadog APM env key for this app environment
      become: true
      lineinfile:
        dest: "/etc/datadog-agent/datadog.yaml"
        regexp: "  env: .*"
        line: "  env: broker_{{ vars['envs'][BRANCH]['env_long'] | lower }}"

    - name: Add custom tags to datadog.yaml
      become: true
      lineinfile:
        dest: "/etc/datadog-agent/datadog.yaml"
        regexp: '  - "{{ item.tagname }}:.*"'
        line: '  - "{{ item.tagname }}:{{ item.value }}"'
      with_items:
        - { tagname: 'deploy_name', value: "broker_{{ vars['envs'][BRANCH]['env_long'] | lower }}_{{ vars['apps'][APP]['app_short'] | lower }}" }
        - { tagname: 'deployed_ec2_instance_id', value: "{{ INSTANCE_ID }}" }

    - name: Disable datadog apm if env is sandbox or dev
      become: true
      when: BRANCH == "dev" or BRANCH == "sandbox"
      lineinfile:
        dest: "/etc/datadog-agent/datadog.yaml"
        regexp: "^  enabled: true"
        insertafter: "^apm_config:.*"
        line: "  enabled: false"

    - name: (API) instrument datadog with the application if env is prod or staging in app.py
      when: BRANCH == "master" or BRANCH == "staging"
      replace:
        dest: "/data-act/backend/dataactbroker/app.py"
        regexp: "^tracer\\.enabled = False"
        replace: "tracer.enabled = True"

    - name: (VAL) instrument datadog with the application if env is prod or staging in app.py
      when: BRANCH == "master" or BRANCH == "staging"
      replace:
        dest: "/data-act/backend/dataactvalidator/app.py"
        regexp: "^tracer\\.enabled = False"
        replace: "tracer.enabled = True"

    - name: Ensure dd-agent ownership for datadog directory
      become: true
      file:
        path: "/etc/datadog-agent/"
        state: directory
        owner: dd-agent
        group: dd-agent
        recurse: "yes"

    # ===================== Setup supervisord.service =====================#

    - name: Make supervisord.service directory
      become: true
      file:
        path: /etc/supervisord/conf.d
        recurse: true
        state: directory

    - name: Supervisord.service conf
      become: true
      shell: echo_supervisord_conf > /etc/supervisord/supervisord.conf

    - name: Supervisord.service conf.d append
      become: true
      shell: echo "files = conf.d/*.conf" >> /etc/supervisord/supervisord.conf

    - name: Supervisord.service config file location (validator)
      when: APP == 'validator'
      become: true
      replace:
        dest: /data-act/config/supervisord.service/supervisord.service
        regexp: 'ExecStart=/bin/supervisord.*'
        replace: "ExecStart=/bin/supervisord -c /data-act/backend/dataactvalidator/config/supervisord.conf"

    - name: Supervisord.service copy
      become: true
      copy:
        remote_src: true
        src: /data-act/config/supervisord.service/supervisord.service
        dest: /usr/lib/systemd/system/supervisord.service

    - name: Modify supervisord configuration to add ENV variable
      ini_file:
        dest: /data-act/backend/dataact{{ APP }}/config/supervisord.conf
        section: supervisord
        option: environment
        value: "PYTHONPATH=%(ENV_PATH)s:/data-act/backend,env={{ vars['envs'][BRANCH]['env_long'] }}"

    # ===================== Logging =====================#

    - name: Create app json log if it doesn't exist
      become: true
      file:
        path: /data-act/app.json-log
        owner: ec2-user
        state: touch

    - name: Create app info log if it doesn't exist
      become: true
      file:
        path: /data-act/info.log
        owner: ec2-user
        state: touch

    # ===================== Enable and Restart Services =====================#

    - name: Enable & restart datadog-agent service
      become: true
      shell: "systemctl enable datadog-agent && systemctl restart datadog-agent"

    - name: Enable & restart filebeat service
      become: true
      shell: "systemctl enable filebeat && systemctl restart filebeat"

    - name: Enable & restart supervisord.service
      become: true
      shell: "systemctl enable supervisord && systemctl restart supervisord"

# ===================== EOF =====================#

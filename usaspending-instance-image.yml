---
- hosts: "{{ HOST }}"

# You MUST provide a DOMAIN_NAME for ALLOWED_HOSTS and SSL

  vars:
    REPO: https://github.com/fedspendingtransparency/usaspending-api.git

    ## Branch options: sandbox, dev, stg, master
    BRANCH: "{{ BRANCH }}"

    ## Used only for filebeat: 'envs' is used to translate 
    ## BRANCH options above into filebeat.yml index
    envs:
      master: {env_long: prod, env_short: prod}
      staging: {env_long: staging, env_short: stg}
      dev: {env_long: dev, env_short: dev}
      sandbox: {env_long: sandbox, env_short: sbx}


    DOMAIN: "{{ DOMAIN_NAME }}"
    ALLOWED_HOSTS: "{{ ALLOWED_HOSTS }}"
    CODE_HOME: /data-act/backend
    CONFIG_HOME: /data-act/config

    STATIC_ASSETS_URL: "{{ lookup('file', 's3url') }}"
    ELASTICACHE_URL: "{{ lookup('file', 'elasticacheurl_{{ BRANCH }}') }}"

    REQ_DIR: "{{ CODE_HOME }}/requirements"

    PROD_CACHE_TIMEOUT: 60000
    NONPROD_CACHE_TIMEOUT: 600

  become_method: sudo  

  user: ec2-user
  roles:
  - pull-repo
  - add-hostfile
  tasks:
    - name: update pip
      become: true 
      shell: pip3.5 install --upgrade pip 

    - name: copy requirements.txt (to check for changes)
      become: true 
      copy:
        src:  "{{ REQ_DIR }}/requirements.txt"
        dest: "{{ REQ_DIR }}/requirements_copy.txt"
        remote_src: true
      register: requirements_txt
    - name: install python packages based on requirements.txt
      become: true 
      when: requirements_txt.changed
      pip: chdir="{{ REQ_DIR }}" requirements="requirements.txt" executable=pip3.5

    - name: copy caching_requirements.txt (to check for changes)
      become: true 
      copy:
        src:  "{{ REQ_DIR }}/caching_requirements.txt"
        dest: "{{ REQ_DIR }}/caching_requirements_copy.txt"
        remote_src: true
      register: caching_requirements_txt
    - name: install python packages based on caching_requirements.txt
      become: true 
      when: caching_requirements_txt.changed
      pip: chdir="{{ REQ_DIR }}" requirements="caching_requirements.txt" executable=pip3.5

    - name: copy server_requirements.txt (to check for changes)
      become: true 
      copy:
        src:  "{{ REQ_DIR }}/server_requirements.txt"
        dest: "{{ REQ_DIR }}/server_requirements_copy.txt"
        remote_src: true
      register: server_requirements_txt
    - name: install python packages based on server_requirements.txt
      become: true
      when: server_requirements_txt.changed
      pip: chdir="{{ REQ_DIR }}" requirements="server_requirements.txt" executable=pip3.5

    - name: copy legacy_requirements.txt (to check for changes)
      become: true 
      copy:
        src:  "{{ REQ_DIR }}/legacy_requirements.txt"
        dest: "{{ REQ_DIR }}/legacy_requirements_copy.txt"
        remote_src: true
      register: legacy_requirements_txt
    - name: install python packages based on legacy_requirements.txt
      become: true
      when: legacy_requirements_txt.changed
      pip: chdir="{{ REQ_DIR }}" requirements="legacy_requirements.txt" executable=pip2

    - name: collect django static assets
      register: collectassets
      shell: python3.5 manage.py collectstatic --clear --no-input
      args:
        chdir: "{{ CODE_HOME }}"
      ignore_errors: true

    - name: upload django static assets
      when: collectassets | success
      shell: "aws s3 cp --recursive usaspending_api/static s3://ds-api-assets/{{ BRANCH }}/ --region us-gov-west-1"
      args:
        chdir: "{{ CODE_HOME }}"

    - name: set static assets path
      when: collectassets | success
      set_fact:
        STATIC_ASSETS_URL: "{{ STATIC_ASSETS_URL }}{{ BRANCH }}/"      

    - name: run migrations
      shell: python3.5 manage.py migrate
      args:
        chdir: "{{ CODE_HOME }}"

    - name: set nginx configuration path to SSL
      set_fact:
         nginx_path: "{{ CONFIG_HOME }}/nginx/nginx_ds_api_ssl.conf"

    - name: (remove later) run nginx as ec2-user
      lineinfile:
        dest: "{{ nginx_path }}"
        regexp: '\s*user.*;'
        line: 'user ec2-user;'

    - name: check whether nginx config has SSL enabled
      command: "awk '/server_name/' {{ nginx_path }}"
      register: check_ssl

    - name: add server name to nginx config (if SSL enabled)
      when: check_ssl.stdout != ""
      lineinfile:
        dest: "{{ nginx_path }}"
        regexp: '\s*server_name.*;'
        line: "\tserver_name {{ DOMAIN }};"

    - name: copy nginx config
      become: true
      copy:
        src:  "{{ nginx_path }}"
        dest: "/etc/nginx/nginx.conf"
        remote_src: true
    
    - name: ensure the correct directory structure for tmp nginx files
      become: true
      file: 
        path: /var/lib/nginx/tmp
        state: directory
        owner: ec2-user
        mode: "u+wrx"
        recurse: true

    - name: copy config file to uwsgi_db.ini
      become: true
      copy:
        src:  "{{ CODE_HOME }}/config/uwsgi.ini"
        dest: "{{ CODE_HOME }}/config/uwsgi_db.ini"
        remote_src: true

    - name: copy user-level environment variable to temp text file...
      shell: "echo env=DATABASE_URL=$DATABASE_URL > {{ CODE_HOME }}/config/temp.txt"
      
    - name: concatenate the duplicate config and the env var
      become: true
      shell: "cat {{ CODE_HOME }}/config/temp.txt >> {{ CODE_HOME }}/config/uwsgi_db.ini"

# usaspending_api/settings.py

    - name: add static url from s3
      lineinfile:
        dest: "{{ CODE_HOME }}/usaspending_api/settings.py"
        regexp: '\s*STATIC_URL =.*'
        line: "STATIC_URL = '{{ STATIC_ASSETS_URL }}'"

    - name: turn debug off in production or staging
      when: BRANCH == 'master' or BRANCH == 'stg'
      lineinfile:
        dest: "{{ CODE_HOME }}/usaspending_api/settings.py"
        regexp: '\s*DEBUG =.*'
        line: "DEBUG = False"

    - name: add host to ALLOWED_HOSTS
      when: BRANCH == 'master' or BRANCH == 'stg'
      lineinfile:
        dest: "{{ CODE_HOME }}/usaspending_api/settings.py"
        regexp: '\s*ALLOWED_HOSTS =.*'
        line: "ALLOWED_HOSTS = ['{{ ALLOWED_HOSTS }}']"

    - name: enable elasticache
      lineinfile:
        dest: "{{ CODE_HOME }}/usaspending_api/settings.py"
        regexp: '\s*CACHE_ENVIRONMENT\s*=.*'
        line: "CACHE_ENVIRONMENT = 'elasticache'"
    
    - name: replace ELASTICACHE-CONNECTION-STRING
      replace:
        dest: "{{ CODE_HOME }}/usaspending_api/settings.py"
        regexp: 'ELASTICACHE-CONNECTION-STRING'
        replace: "{{ ELASTICACHE_URL }}"

    - name: replace TIMEOUT-IN-SECONDS ( NONPROD )
      when: BRANCH == 'sandbox' or BRANCH == 'dev'
      replace:
        dest: "{{ CODE_HOME }}/usaspending_api/settings.py"
        regexp: 'TIMEOUT-IN-SECONDS'
        replace: "{{ NONPROD_CACHE_TIMEOUT }}"      
  
    - name: replace TIMEOUT-IN-SECONDS ( PROD )
      when: BRANCH == 'master' or BRANCH == 'stg'
      replace:
        dest: "{{ CODE_HOME }}/usaspending_api/settings.py"
        regexp: 'TIMEOUT-IN-SECONDS'
        replace: "{{ PROD_CACHE_TIMEOUT }}"

# config/filebeat/filebeat.yml

    - name: copy filebeat config
      become: true
      copy:
        src:  "{{ CONFIG_HOME }}/filebeat/filebeat-usaspending.yml"
        dest: "/etc/filebeat/filebeat.yml"
        remote_src: true
    - name: update filebeat config to set correct index
      become: true
      replace:
        dest: "/etc/filebeat/filebeat.yml"
        regexp: 'index: filebeat'
        replace: "index: {{ vars['envs'][BRANCH]['env_short'] }}-filebeat"

# Start/Stop Services  

    - name: stop filebeat
      become: true
      shell: systemctl stop filebeat
      ignore_errors: true

    - name: start filebeat
      become: true
      shell: systemctl start filebeat  

    - name: stop supervisord
      become: true
      shell: pkill supervisord
      ignore_errors: true    

    - name: start supervisord
      become: true
      shell: "supervisord -c {{ CODE_HOME }}/config/supervisord.conf &"
      environment:
        PYTHONPATH: "{{ CODE_HOME }}"
      args:
        chdir: "{{ CODE_HOME }}/usaspending_api/"

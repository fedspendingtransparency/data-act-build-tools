loki.source.api "server" {
  http {
    listen_address = "0.0.0.0"
    listen_port = 8888
  }
  forward_to = [loki.process.processor.receiver]
}

loki.process "processor" {
  stage.template {
    source   = "stream"
    template = "{{ default \"other\" .Value }}"
  }

  forward_to = [module.file.ecs_pipeline.exports.input]
}

argument "write_to" {
  optional = false
}

loki.process "lambda" {
    stage.match {
        selector = "{ lambda_function_name=~\".+\" }"

        stage.match {
            selector = "{ otelTraceID=~\".{2,}\" }"
            
            stage.template {
                source = "log"
                template = "{{ .log }} (otelTraceID: {{ .otelTraceID }})"
            }
        }
    }

    forward_to = argument.write_to.value
}

export "input" {
  value = loki.process.lambda.receiver
}

local.file "packing_list" {
  filename = "/etc/alloy/loki_packing_list.txt"
}

loki.process "format" {
  stage.template {
    source   = "level"
    template = "{{ default \"INFO\" .Value }}"
  }

  stage.pack {
    ingest_timestamp = false
    labels = split(replace(local.file.packing_list.content, "\r", ""), ",\n")
  }

  stage.label_keep {
    values = [
      "stream",
    ]
  }

  stage.metrics {
    metric.counter {
      name        = "log_lines_total"
      description = "total number of log lines"
      prefix      = "loki_processed_"

      match_all         = true
      action            = "inc"
      max_idle_duration = "72h"
    }
  }

  forward_to = [loki.write.loki.receiver]
}

loki.write "loki" {
  max_streams = 50

  endpoint {
    url = env("LOKI_PUSH_ENDPOINT")
    tls_config {
      ca_file = "/etc/ssl/certs/pca_root_cert.pem"
    }
  }

  wal {
    enabled = true
  }
}

otelcol.exporter.otlp "loki" {
  client {
    endpoint = env("LOKI_PUSH_ENDPOINT")
    tls {
      insecure_skip_verify = true
    } 
  }
}

otelcol.exporter.prometheus "default" {
  forward_to = [prometheus.remote_write.mimir.receiver]
}

otelcol.exporter.otlphttp "tempo" {
  client {
    endpoint = env("TEMPO_ENDPOINT")
    tls {
      insecure_skip_verify = true
   } 
  }
}

otelcol.exporter.prometheus "default" {
  forward_to = [prometheus.remote_write.default.receiver]
}

otelcol.receiver.otlp "agent" {
  grpc {
    endpoint = "127.0.0.1:4317"
  }

  http {
    endpoint = "127.0.0.1:4318"
  }

  output {
    metrics = [otelcol.exporter.prometheus.default.input]
    logs    = [otelcol.exporter.otlp.loki.input]
    traces  = [otelcol.exporter.otlphttp.tempo.input]
  }
}
#===============================  USASPENDING-API-IMAGE PLAYBOOK  ===============================#

---
- hosts: all

  become_method: sudo
  remote_user: ec2-user

  vars:
    BRANCH: "{{ BRANCH }}"
    REPO: https://github.com/fedspendingtransparency/usaspending-api.git
    CODE_HOME: /data-act/backend
    CONFIG_HOME: /data-act/config
    REQ_DIR: "{{ CODE_HOME }}/requirements"
    ansible_python_interpreter: /usr/bin/python3
    DATADOG_YML_PATH: "/data-act/config/deploy/datadog.yaml"

    envs:
      master : {env_long: prod }
      staging: {env_long: staging }
      qat    : {env_long: qat }
      dev    : {env_long: dev }
      sandbox: {env_long: sandbox}

  tasks:

#=============================== Copy Git Credentials from S3 Bucket ===============================#

    - name: boto3/python-selinux (required for installing with Ansible using /usr/bin/python3 as the interpreter)
      become: true
      pip:
        name:
          - selinux
          - boto3
        executable: pip3

    - name: copy github credentials from S3 Bucket
      aws_s3:
        mode: getstr
        bucket: da-config
        object: /shared/github-data-act-service-account.pat
        region: us-gov-west-1
      register: pat

#===============================  Git Checkout  ===============================#

    - name: checkout backend from git
      become: true
      git:
        repo: "{{ REPO }}"
        version: "{{ BRANCH }}"
        dest: "{{ CODE_HOME }}"
        force: yes

    - name: checkout usaspending-config from git
      become: true
      git:
        repo: https://pat:{{ pat.contents }}@github.com/fedspendingtransparency/usaspending-config.git
        dest: /data-act/config
        force: yes

    - name: pull repo - checkout build-tools repo from git
      become: true
      git:
        repo: https://pat:{{ pat.contents }}@github.com/fedspendingtransparency/data-act-build-tools.git
        dest: /data-act/build-tools
        force: yes

    - name: assign ownership of api to ec2-user
      become: true
      file:
        path: /data-act/
        owner: ec2-user
        recurse: yes

    - name: assign ownership of tmp to ec2-user
      become: true
      file:
        path: /tmp
        owner: ec2-user
        recurse: yes

#===============================  Set http and https proxies  ===============================#
    
    - name: copy ansible-vars-{{ vars['envs'][BRANCH]['env_long'] }}.yml to 
      fetch:
        src: "{{ CONFIG_HOME }}/deploy/ansible-vars-{{ vars['envs'][BRANCH]['env_long'] }}.yml"
        dest: /home/ec2-user/
        flat: true

    - name: Load variables from config repo
      include_vars: "/home/ec2-user/ansible-vars-{{ vars['envs'][BRANCH]['env_long'] }}.yml"

    - name: create /etc/profile.d/proxy.sh to export proxy env vars
      become: true
      copy:
        dest: /etc/profile.d/proxy.sh
        mode: 0755
        content: |
          http_proxy={{ SQUID_ELB }}
          https_proxy={{ SQUID_ELB }}
          no_proxy={{ NO_PROXY_VAR }}
          export http_proxy https_proxy no_proxy

    - name: add proxy env vars to /etc/environment
      become: true
      blockinfile:
        dest: /etc/environment
        block: |
          http_proxy={{ SQUID_ELB }}
          https_proxy={{ SQUID_ELB }}
          HTTP_PROXY={{ SQUID_ELB }}
          HTTPS_PROXY={{ SQUID_ELB }}
          no_proxy={{ NO_PROXY_VAR }}
          NO_PROXY={{ NO_PROXY_VAR }}

    - name: Execute proxy.sh
      shell: /etc/profile.d/proxy.sh

    - name: add proxy env to /etc/systemd/system.config
      become: true
      ini_file:
        path: /etc/systemd/system.conf
        section: Manager
        option: DefaultEnvironment
        value: >
          http_proxy={{ SQUID_ELB }}
          https_proxy={{ SQUID_ELB }}
          HTTP_PROXY={{ SQUID_ELB }}
          HTTPS_PROXY={{ SQUID_ELB }}
          no_proxy={{ NO_PROXY_VAR }}
          NO_PROXY={{ NO_PROXY_VAR }}

#===============================  Install PIP Packages  ===============================#

    - name: update pip
      become: true
      shell: pip3 install --upgrade pip

    - name: install python packages based on requirements.txt
      become: true
      pip:
        requirements: "{{ REQ_DIR }}/requirements-app.txt"
        executable: pip3

    - name: install python packages based on requirements-server.txt
      become: true
      pip:
        requirements: "{{ REQ_DIR }}/requirements-server.txt"
        executable: pip3

    - name: ensure the correct directory structure for tmp nginx files
      become: true
      file:
        path: /var/lib/nginx/tmp
        state: directory
        owner: ec2-user
        mode: "u+wrx"
        recurse: yes

    - name: set starting directory to CODE_HOME
      become: true
      lineinfile:
        dest: /home/ec2-user/.bashrc
        line: "cd {{ CODE_HOME }}"
        insertafter: EOF

#===============================  Configure DataDog Key  ===============================#

    - name: copy datadog_key from S3
      aws_s3:
        mode: get
        bucket: da-config
        object: /shared/datadog_key
        dest: /data-act/config/datadog_key
        region: us-gov-west-1

    - name: save the contents of datadog_key file
      shell: cat /data-act/config/datadog_key
      register: dd_key

    - name: add Datadog license key to datadog.yaml
      lineinfile:
        dest: "{{ DATADOG_YML_PATH }}"
        regexp: '\s*api_key: .*'
        line: "api_key: {{ dd_key.stdout }}"

    - name: copy datadog.yml to its home location
      become: true
      copy:
        src: "{{ DATADOG_YML_PATH }}"
        dest: /etc/datadog-agent/datadog.yaml
        remote_src: true

#=============================== Configure ClamAv  ===============================#

    - name: Create /var/log/clamav
      become: true
      file:
        path: /var/log/clamav
        state: directory

    - name: chmod 0755 clamscan_daily
      become: true
      file:
        path: /data-act/config/clamav/clamscan_daily.sh
        owner: ec2-user
        mode: "0755"

    - name : create Crontab to run daily scans
      become: true
      cron:
        name: add clamscan_daily.sh and freshclam to crontab
        minute: "0"
        hour: "1"
        job: '/usr/bin/freshclam --quiet && /data-act/config/clamav/clamscan_daily.sh'

#===============================  Logrotate  ===============================#

    - name: move logrotate into nightly cron
      become: true
      copy:
        src:  /data-act/config/deploy/elk/usaspending-api.logrotate
        dest: /etc/logrotate.d/usaspending-api
        remote_src: true

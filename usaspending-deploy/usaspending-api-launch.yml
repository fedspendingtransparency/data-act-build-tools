---
- hosts: "{{ HOST }}"

# You MUST provide a DOMAIN_NAME for ALLOWED_HOSTS and SSL

  vars:
    ALLOWED_HOSTS: "{{ ALLOWED_HOSTS }}"

    ## Branch options: sandbox, dev, stg, master
    BRANCH: "{{ BRANCH }}"
    DOMAIN: "{{ DOMAIN }}"

    ## Used only for filebeat: 'envs' is used to translate
    ## BRANCH options above into filebeat.yml index
    envs:
      master: {env_long: prod, env_short: prod}
      staging: {env_long: staging, env_short: stg}
      dev: {env_long: dev, env_short: dev}
      sandbox: {env_long: sandbox, env_short: sbx}

    CODE_HOME: /data-act/backend
    CONFIG_HOME: /data-act/config

    # Default to staging
    CSV_S3_BUCKET_NAME: "{{ lookup('file', 'csv_name_staging') }}"
    CSV_SQS_QUEUE_NAME: "{{ lookup('file', 'csv_name_staging') }}"
    CSV_AWS_REGION: "{{ lookup('file', 'csv_aws_region') }}"
    BULK_DOWNLOAD_S3_BUCKET_NAME: "{{ lookup('file', 'csv_bulk_staging') }}"
    BULK_DOWNLOAD_SQS_QUEUE_NAME: "{{ lookup('file', 'csv_bulk_staging') }}"

    STATIC_ASSETS_URL: "{{ lookup('file', 's3url') }}"
    ELASTICACHE_URL: "{{ lookup('file', 'elasticacheurl_{{ BRANCH }}') }}"

    PROD_CACHE_TIMEOUT: None
    NONPROD_CACHE_TIMEOUT: 600

  become_method: sudo

  user: ec2-user

  tasks:

  # /etc/nginx/nginx.conf

    - name: set nginx configuration path to SSL
      set_fact:
         nginx_path: "{{ CONFIG_HOME }}/nginx/nginx_ds_api.conf"

    - name: (remove later) run nginx as ec2-user
      lineinfile:
        dest: "{{ nginx_path }}"
        regexp: '\s*user.*;'
        line: 'user ec2-user;'

    - name: add server name to nginx config
      lineinfile:
        dest: "{{ nginx_path }}"
        regexp: '\s*server_name.*;'
        line: "\tserver_name {{ DOMAIN }};"

    - name: copy nginx config
      become: true
      copy:
        src:  "{{ nginx_path }}"
        dest: "/etc/nginx/nginx.conf"
        remote_src: true

  # config/uwsgi.ini

    - name: duplicate config file to uwsgi_db.ini
      become: true
      copy:
        src:  "{{ CODE_HOME }}/config/uwsgi.ini"
        dest: "{{ CODE_HOME }}/config/uwsgi_db.ini"
        remote_src: true

    - name: add DB_SOURCE to uswgi ini
      become: true
      shell: "echo -n env=DB_SOURCE= | cat - /etc/db_{{ BRANCH }}.sh >> {{ CODE_HOME }}/config/uwsgi_db.ini"

    - name: add DB_R1 to uswgi ini (same as source, no replicas in anything but prod)
      when: BRANCH == 'stg'
      become: true
      shell: "echo -n env=DB_R1=     | cat - /etc/db_{{ BRANCH }}.sh >> {{ CODE_HOME }}/config/uwsgi_db.ini"
      
    - name: add DB_R1 to uswgi ini (same as source, no replicas in anything but prod)
      when: BRANCH == 'master'
      become: true
      shell: "echo -n env=DB_R1=        | cat - /etc/db_{{ BRANCH }}_r1.sh >> {{ CODE_HOME }}/config/uwsgi_db.ini"
      ignore_errors: true    
     
# newrelic settings

    - name: get contents of nr_key file
      command: cat /etc/nr_key
      register: NR_KEY

    - name: add newrelic license key
      lineinfile:
        dest: "{{ CODE_HOME }}/config/newrelic.ini"
        regexp: '\s*license_key =.*'
        line: "license_key = {{ NR_KEY.stdout }}"
        
    - name: add newrelic label (app_name)
      lineinfile:
        dest: "{{ CODE_HOME }}/config/newrelic.ini"
        regexp: '\s*app_name =.*'
        line: "app_name = DA-Website-API-{{ BRANCH }}"
        
    - name: add single-interpreter to uwsgi_db.ini
      ini_file:
        dest: "{{ CODE_HOME }}/config/uwsgi_db.ini"
        section: "uwsgi"
        option: single-interpreter
        value: true
        
    - name: modify supervisord configuration (start command)
      ini_file:
        dest: "{{ CODE_HOME }}/config/supervisord.conf"
        section: "program:uwsgi"
        option: command
        value: "newrelic-admin run-program uwsgi --ini /data-act/backend/config/uwsgi_db.ini --socket :3030 --stats /tmp/stats.socket"
        
    - name: modify supervisord configuration (environment)
      ini_file:
        dest: "{{ CODE_HOME }}/config/supervisord.conf"
        section: "program:uwsgi"
        option: environment
        value: "PYTHONPATH=%(ENV_PATH)s:/data-act/backend,NEW_RELIC_CONFIG_FILE={{ CODE_HOME }}/config/newrelic.ini"

 # usaspending_api/settings.py
 
    - name: add CSV download option
      lineinfile:
        dest: "{{ CODE_HOME }}/usaspending_api/settings.py"
        regexp: '\s*IS_LOCAL =.*'
        line: "IS_LOCAL = False"
        
    - name: add baby bucket name (if staging)
      lineinfile:
        dest: "{{ CODE_HOME }}/usaspending_api/settings.py"
        regexp: '\s*CSV_S3_BUCKET_NAME =.*'
        line: "CSV_S3_BUCKET_NAME = '{{ CSV_S3_BUCKET_NAME }}'"

    - name: add baby bucket name (if prod)
      when: BRANCH == 'master'
      vars:
        BABY_BUCKET_PROD: "{{ lookup('file', 'csv_name_prod') }}"
      lineinfile:
        dest: "{{ CODE_HOME }}/usaspending_api/settings.py"
        regexp: '\s*CSV_S3_BUCKET_NAME =.*'
        line: "CSV_S3_BUCKET_NAME = '{{ BABY_BUCKET_PROD }}'"
        
    - name: add baby sqs name (if staging)
      lineinfile:
        dest: "{{ CODE_HOME }}/usaspending_api/settings.py"
        regexp: '\s*CSV_SQS_QUEUE_NAME =.*'
        line: "CSV_SQS_QUEUE_NAME = '{{ CSV_SQS_QUEUE_NAME }}'"

    - name: add baby sqs name (if prod)
      when: BRANCH == 'master'
      vars:
        BABY_SQS_PROD: "{{ lookup('file', 'csv_name_prod') }}"
      lineinfile:
        dest: "{{ CODE_HOME }}/usaspending_api/settings.py"
        regexp: '\s*CSV_SQS_QUEUE_NAME =.*'
        line: "CSV_SQS_QUEUE_NAME = '{{ BABY_SQS_PROD }}'"
       

    - name: add bulk bucket name (if staging)
      lineinfile:
        dest: "{{ CODE_HOME }}/usaspending_api/settings.py"
        regexp: '\s*BULK_DOWNLOAD_S3_BUCKET_NAME =.*'
        line: "BULK_DOWNLOAD_S3_BUCKET_NAME = '{{ BULK_DOWNLOAD_S3_BUCKET_NAME }}'"

    - name: add bulk bucket name (if prod)
      when: BRANCH == 'master'
      vars:
        BULK_DOWNLOAD_S3_BUCKET_NAME_PROD: "{{ lookup('file', 'csv_bulk_prod') }}"
      lineinfile:
        dest: "{{ CODE_HOME }}/usaspending_api/settings.py"
        regexp: '\s*BULK_DOWNLOAD_S3_BUCKET_NAME =.*'
        line: "BULK_DOWNLOAD_S3_BUCKET_NAME = '{{ BULK_DOWNLOAD_S3_BUCKET_NAME_PROD }}'"
        
    - name: add bulk sqs name (if staging)
      lineinfile:
        dest: "{{ CODE_HOME }}/usaspending_api/settings.py"
        regexp: '\s*BULK_DOWNLOAD_SQS_QUEUE_NAME =.*'
        line: "BULK_DOWNLOAD_SQS_QUEUE_NAME = '{{ BULK_DOWNLOAD_SQS_QUEUE_NAME }}'"

    - name: add bulk sqs name (if prod)
      when: BRANCH == 'master'
      vars:
        BULK_DOWNLOAD_SQS_QUEUE_NAME_PROD: "{{ lookup('file', 'csv_bulk_prod') }}"
      lineinfile:
        dest: "{{ CODE_HOME }}/usaspending_api/settings.py"
        regexp: '\s*BULK_DOWNLOAD_SQS_QUEUE_NAME =.*'
        line: "BULK_DOWNLOAD_SQS_QUEUE_NAME = '{{ BULK_DOWNLOAD_SQS_QUEUE_NAME_PROD }}'"

    - name: add CSV AWS region
      lineinfile:
        dest: "{{ CODE_HOME }}/usaspending_api/settings.py"
        regexp: '\s*CSV_AWS_REGION =.*'
        line: "CSV_AWS_REGION = '{{ CSV_AWS_REGION }}'"

    - name: add Bulk AWS region
      lineinfile:
        dest: "{{ CODE_HOME }}/usaspending_api/settings.py"
        regexp: '\s*BULK_DOWNLOAD_AWS_REGION =.*'
        line: "BULK_DOWNLOAD_AWS_REGION = '{{ CSV_AWS_REGION }}'"

    - name: add static url from s3
      lineinfile:
        dest: "{{ CODE_HOME }}/usaspending_api/settings.py"
        regexp: '\s*STATIC_URL =.*'
        line: "STATIC_URL = '{{ STATIC_ASSETS_URL }}{{ BRANCH }}/'"

    - name: turn debug off in production or staging
      when: BRANCH == 'master' or BRANCH == 'stg'
      lineinfile:
        dest: "{{ CODE_HOME }}/usaspending_api/settings.py"
        regexp: '\s*DEBUG =.*'
        line: "DEBUG = False"

    - name: add host to ALLOWED_HOSTS
      lineinfile:
        dest: "{{ CODE_HOME }}/usaspending_api/settings.py"
        regexp: '\s*ALLOWED_HOSTS =.*'
        line: "ALLOWED_HOSTS = ['{{ ALLOWED_HOSTS }}']"

    - name: enable elasticache
      lineinfile:
        dest: "{{ CODE_HOME }}/usaspending_api/settings.py"
        regexp: '\s*CACHE_ENVIRONMENT\s*=.*'
        line: "CACHE_ENVIRONMENT = 'elasticache'"

    - name: replace ELASTICACHE-CONNECTION-STRING
      replace:
        dest: "{{ CODE_HOME }}/usaspending_api/settings.py"
        regexp: 'ELASTICACHE-CONNECTION-STRING'
        replace: "{{ ELASTICACHE_URL }}"

    - name: replace TIMEOUT-IN-SECONDS ( NONPROD )
      when: BRANCH == 'sandbox' or BRANCH == 'dev'
      replace:
        dest: "{{ CODE_HOME }}/usaspending_api/settings.py"
        regexp: 'TIMEOUT-IN-SECONDS'
        replace: "{{ NONPROD_CACHE_TIMEOUT }}"

    - name: replace TIMEOUT-IN-SECONDS ( PROD )
      when: BRANCH == 'master' or BRANCH == 'stg'
      replace:
        dest: "{{ CODE_HOME }}/usaspending_api/settings.py"
        regexp: 'TIMEOUT-IN-SECONDS'
        replace: "{{ PROD_CACHE_TIMEOUT }}"

 # SSL Certificates

    - name: copy cert.pem
      become: true
      copy:
        src:  "/etc/cert_{{ BRANCH }}.pem"
        dest: "/etc/cert.pem"
        remote_src: true

    - name: copy cert.key
      become: true
      copy:
        src:  "/etc/cert_{{ BRANCH }}.key"
        dest: "/etc/cert.key"
        remote_src: true

# config/filebeat/filebeat.yml

    - name: copy filebeat config
      become: true
      copy:
        src:  "{{ CONFIG_HOME }}/filebeat/filebeat-usaspending.yml"
        dest: "/etc/filebeat/filebeat.yml"
        remote_src: true
    - name: update filebeat config to set correct index
      become: true
      replace:
        dest: "/etc/filebeat/filebeat.yml"
        regexp: 'index: filebeat'
        replace: "index: {{ vars['envs'][BRANCH]['env_short'] }}-filebeat"

 # Start/Stop Services

    - name: stop supervisord
      become: true
      shell: pkill supervisord
      ignore_errors: yes

    - name: start supervisord
      become: true
      shell: "supervisord -c {{ CODE_HOME }}/config/supervisord.conf &"
      environment:
        PYTHONPATH: "{{ CODE_HOME }}"
      args:
        chdir: "{{ CODE_HOME }}/usaspending_api/"

    - name: stop filebeat
      become: true
      shell: systemctl stop filebeat
      ignore_errors: true

    - name: start filebeat
      become: true
      shell: systemctl start filebeat

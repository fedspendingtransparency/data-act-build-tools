#===============================  USASPENDING-API-LAUNCH PLAYBOOK  ===============================#

#===============================  Notes  ===============================#
#  - Branch options: sandbox, dev, stg, master, used for filebeat index #
#  - 'envs' used for filebeat to translate                              #
#  - You MUST provide a DOMAIN_NAME for ALLOWED_HOSTS and SSL           #
#=======================================================================#


---
- hosts: "{{ HOST }}"

  become_method: sudo
  user: ec2-user

  vars:
    ALLOWED_HOSTS: "{{ ALLOWED_HOSTS }}"
    BRANCH: "{{ BRANCH }}"
    DOMAIN: "{{ DOMAIN }}"

    envs:
      master: {env_long: prod, env_short: prod}
      stg: {env_long: staging, env_short: stg}
      dev: {env_long: dev, env_short: dev}
      sandbox: {env_long: sandbox, env_short: sbx}

    CODE_HOME: /data-act/backend
    CONFIG_HOME: /data-act/config

    PROD_CACHE_TIMEOUT: None
    NONPROD_CACHE_TIMEOUT: 600

    ansible_python_interpreter: "/usr/bin/python"

  tasks:

    - name: Load variables from config repo
      include_vars: "{{ CONFIG_HOME }}/deploy/ansible-vars-{{ vars['envs'][BRANCH]['env_long'] }}.yml"

#===============================  Nginx Config  ===============================#

    - name: set nginx configuration path to SSL
      set_fact:
         nginx_path: "{{ CONFIG_HOME }}/deploy/nginx/nginx_usaspending_api.conf"

    - name: (remove later) run nginx as ec2-user
      lineinfile:
        dest: "{{ nginx_path }}"
        regexp: '\s*user.*;'
        line: 'user ec2-user;'

    - name: add server name to nginx config
      lineinfile:
        dest: "{{ nginx_path }}"
        regexp: '\s*server_name.*;'
        line: "\tserver_name {{ DOMAIN }};"

    - name: copy nginx config
      become: true
      copy:
        src:  "{{ nginx_path }}"
        dest: "/etc/nginx/nginx.conf"
        remote_src: true

#===============================  uwsgi_db.ini Setup  ===============================#

    - name: duplicate config file to uwsgi_db.ini
      become: true
      copy:
        src:  "{{ CODE_HOME }}/config/uwsgi.ini"
        dest: "{{ CODE_HOME }}/config/uwsgi_db.ini"
        remote_src: true

    - name: download secrets from S3 bucket
      become: true
      shell: " aws s3 cp s3://da-config/usaspending/{{ vars['envs'][BRANCH]['env_long'] }}-usaspending-api-secrets.yml /etc/ --region us-gov-west-1"

    - name: load secrets
      include_vars: "/etc/{{ vars['envs'][BRANCH]['env_long'] }}-usaspending-api-secrets.yml"

    - name: add DB_SOURCE to uswgi ini
      become: true
      shell: "echo env=DB_SOURCE={{ DB_SOURCE }} >> {{ CODE_HOME }}/config/uwsgi_db.ini"

    - name: add DB_R1 to uswgi ini
      become: true
      shell: "echo env=DB_R1={{ DB_R1 }} >> {{ CODE_HOME }}/config/uwsgi_db.ini"

#===============================  DataDog Configuration  ===============================#

    - name: add datadog label (app_name)
      become: true
      lineinfile:
        dest: "/etc/datadog-agent/datadog.yaml"
        regexp: ' env: .*'
        line: "  env:  USASpending-{{ BRANCH }}"

    - name: ensure dd-agent ownership for datadog directory
      become: true
      file: 
        path: "/etc/datadog-agent/"
        state: directory
        owner: dd-agent
        group: dd-agent
        recurse: yes
        
    - name: add single-interpreter to uwsgi_db.ini
      become: true
      ini_file:
        dest: "{{ CODE_HOME }}/config/uwsgi_db.ini"
        section: "uwsgi"
        option: single-interpreter
        value: true
        
    - name: modify supervisord configuration (start command)
      ini_file:
        dest: "{{ CODE_HOME }}/config/supervisord.conf"
        section: "program:uwsgi"
        option: command
        value: "ddtrace-run uwsgi --ini /data-act/backend/config/uwsgi_db.ini --socket :3030 --stats /tmp/stats.socket"

    - name: add datadog configuration (1)
      lineinfile:
        dest: "{{ CODE_HOME }}/usaspending_api/settings.py"
        insertafter: "^    'django.contrib.postgres',\n"
        line: "    'ddtrace.contrib.django',"
        state: present

    - name: add datadog configuration (2)
      lineinfile:
        dest: "{{ CODE_HOME }}/usaspending_api/settings.py"
        insertafter: "^INTERNAL_IPS = ()"
        line: |
          DATADOG_TRACE = {
            'DEFAULT_SERVICE': 'API',
            'TAGS': {'env': 'USASpending-{{ BRANCH }}'},
          }
        state: present

#===============================  usaspending_api/settings.py  ===============================#
 
    - name: add settings.py env vars (bulk/baby download, regions, static asset url, elasticsearch)
      lineinfile:
        dest: "{{ CODE_HOME }}/usaspending_api/settings.py"
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
      with_items:
        - { regexp: "^IS_LOCAL =.*", 
            line:   "IS_LOCAL = False" }

        - { regexp: '^USASPENDING_AWS_REGION =.*',
            line: "USASPENDING_AWS_REGION = '{{ USASPENDING_AWS_REGION }}'" }

        - { regexp: '^BULK_DOWNLOAD_S3_BUCKET_NAME =.*',
            line: "BULK_DOWNLOAD_S3_BUCKET_NAME = '{{ BULK_DOWNLOAD_S3_BUCKET_NAME }}'" }

        - { regexp: '^BULK_DOWNLOAD_SQS_QUEUE_NAME =.*', 
            line: "BULK_DOWNLOAD_SQS_QUEUE_NAME = '{{ BULK_DOWNLOAD_SQS_QUEUE_NAME }}'" }

        - { regexp: '\s*ES_HOSTNAME\*=.*',
            line: "ES_HOSTNAME = '{{ ES_HOSTNAME }}'" }

        - { regexp: '^MONTHLY_DOWNLOAD_S3_BUCKET_NAME =.*', 
            line: "MONTHLY_DOWNLOAD_S3_BUCKET_NAME = '{{ MONTHLY_DOWNLOAD_S3_BUCKET_NAME }}'" }

        - { regexp: '\s*STATIC_URL =.*',
            line: "STATIC_URL = '{{ STATIC_ASSETS_URL }}{{ BRANCH }}/'" }

        - { regexp: '^CFDA_BUCKET_NAME =.*',
            line: "CFDA_BUCKET_NAME = '{{ CFDA_BUCKET_NAME }}'" }

        - { regexp: '^CFDA_REGION =.*',
            line: "CFDA_REGION = '{{ CFDA_REGION }}'" }

        - { regexp: '^CFDA_FILE_PATH =.*',
            line: "CFDA_FILE_PATH = '{{ CFDA_FILE_PATH }}'" }

    - name: turn debug off in production or staging
      when: BRANCH == 'master' or BRANCH == 'stg'
      lineinfile:
        dest: "{{ CODE_HOME }}/usaspending_api/settings.py"
        regexp: '\s*DEBUG =.*'
        line: "DEBUG = False"

    - name: add host to ALLOWED_HOSTS
      lineinfile:
        dest: "{{ CODE_HOME }}/usaspending_api/settings.py"
        regexp: '\s*ALLOWED_HOSTS =.*'
        line: "ALLOWED_HOSTS = ['{{ ALLOWED_HOSTS }}']"

    - name: enable elasticache (in staging or prod)
      when: BRANCH == 'stg' or BRANCH == 'master'
      lineinfile:
        dest: "{{ CODE_HOME }}/usaspending_api/settings.py"
        regexp: '\s*CACHE_ENVIRONMENT\s*=.*'
        line: "CACHE_ENVIRONMENT = 'elasticache'"

    - name: replace ELASTICACHE-CONNECTION-STRING (in staging or prod)
      when: BRANCH == 'stg' or BRANCH == 'master' 
      replace:
        dest: "{{ CODE_HOME }}/usaspending_api/settings.py"
        regexp: "'ELASTICACHE-CONNECTION-STRING'"
        replace: "{{ ELASTICACHE_URL }}"
    
    - name: replace ELASTICACHE-MASTER-STRING (in staging or prod)
      when: BRANCH == 'stg' or BRANCH == 'master'
      replace:
        dest: "{{ CODE_HOME }}/usaspending_api/settings.py"
        regexp: "ELASTICACHE-MASTER-STRING"
        replace: "{{ ELASTICACHE_MASTER_URL }}"

    - name: enable local cache (in dev or sandbox)
      when: BRANCH == 'dev' or BRANCH == 'sandbox'
      lineinfile:
        dest: "{{ CODE_HOME }}/usaspending_api/settings.py"
        regexp: '\s*CACHE_ENVIRONMENT\s*=.*'
        line: "CACHE_ENVIRONMENT = 'local'"

    - name: replace TIMEOUT-IN-SECONDS (in dev or sandbox)
      when: BRANCH == 'dev' or BRANCH == 'sandbox'
      replace:
        dest: "{{ CODE_HOME }}/usaspending_api/settings.py"
        regexp: 'TIMEOUT-IN-SECONDS'
        replace: "{{ NONPROD_CACHE_TIMEOUT }}"

    - name: replace TIMEOUT-IN-SECONDS (in staging or prod)
      when: BRANCH == 'master' or BRANCH == 'stg'
      replace:
        dest: "{{ CODE_HOME }}/usaspending_api/settings.py"
        regexp: 'TIMEOUT-IN-SECONDS'
        replace: "{{ PROD_CACHE_TIMEOUT }}"

#===============================  SSL Certs  ===============================#

    - name: copy public.pem from S3 Bucket
      become: true 
      shell: "aws s3 cp s3://usaspending-ssl/usaspending-api-gov/{{ DOMAIN }}/public.pem /etc/cert.pem --region us-gov-west-1"

    - name: copy private.pem from S3 Bucket
      become: true 
      shell: "aws s3 cp s3://usaspending-ssl/usaspending-api-gov/{{ DOMAIN }}/private.pem /etc/cert.key --region us-gov-west-1"
        
#===============================  Filebeat Configuration  ===============================#

    - name: copy filebeat config
      become: true
      copy:
        src:  "{{ CONFIG_HOME }}/deploy/elk/usaspending_api_filebeat.yml"
        dest: "/etc/filebeat/filebeat.yml"
        remote_src: true

    - name: update filebeat config to set correct index
      become: true
      replace:
        dest: "/etc/filebeat/filebeat.yml"
        regexp: 'index: filebeat'
        replace: "index: usaspending-api-{{ vars['envs'][BRANCH]['env_short'] }}"

#===============================  Setup supervisord.service  ===============================#

    - name: make supervisord.service directory
      become: true
      file:
        path: /etc/supervisord/conf.d
        recurse: true
        state: directory

    - name: supervisord.service conf
      become: true
      shell: echo_supervisord_conf > /etc/supervisord/supervisord.conf

    - name: supervisord.service conf.d append
      become: true
      shell: echo "files = conf.d/*.conf" >> /etc/supervisord/supervisord.conf

    - name: supervisord.service copy
      become: true
      copy:
        remote_src: true
        src:  "{{ CONFIG_HOME }}/supervisord.service/supervisord.service"
        dest: "/usr/lib/systemd/system/supervisord.service"

#===============================  Enable and Restart Services  ===============================#

    - name: enable & restart datadog-agent service
      become: true
      shell: "systemctl enable datadog-agent && systemctl restart datadog-agent"

    - name: enable & restart filebeat service
      become: true
      shell: "systemctl enable filebeat && systemctl restart filebeat"

    - name: enable & restart supervisord.service
      become: true
      shell: "systemctl enable supervisord && systemctl restart supervisord"

    - name: check status of all services
      become: true
      command: "systemctl status supervisord -l && systemctl status datadog-agent -l && systemctl status filebeat"
      register: status
      ignore_errors: yes

    - name: output the statuses 
      become: true
      debug: 
        msg: "{{ status.stdout }}"

#===============================  EOF  ===============================#
